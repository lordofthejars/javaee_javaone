mixin slide(names, slideClasses)
  if names
    section(class=names+' '+slideClasses, data-bespoke-backdrop='backdrop ' + names.split(' ').map(function(name) { return 'backdrop--' + name; }).join(' '))
      block
  else
    section
      block

doctype html
html
  head
  meta(charset='utf-8')
  meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
  title Make your REST services attack proof

  link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      +slide('title')
        h1  Make your <span class='important'>REST</span> services<br /> <span class='important'>attack</span> proof
      
      +slide
        img.avatar(src='images/profile.jpg')
        h4 @alexsotob - lordofthejars.com
        img.cloudbees(src='images/cloudbees.png')
        img.logos(src='images/logos.png')

      +slide
        div.images
          img.side-by-side(src='images/dzone1.png')
          img.side-by-side(src='images/aia.jpg')
      
      +slide('still matrix')
        h2 Don't
        h3 &mdash; be &mdash;
        h2 scared
        
      +slide('prepare')
        h2 Prepare your Devices
      
      +slide('rest')
        h1 REST API Introduction
      
      +slide
        h2.underline What is REST?
        ul.lists
          li Architecture style
          li simpler alternative to SOAP, CORBA, RPC systems

      +slide
        h2.underline Constraints
        ul.lists
          li.important client-server
          li.important stateless
          li cacheable on client
          li code on demand (optional)
          li layered system
          li uniform interface
          
      +slide
        h2.underline What are RESTful WebServices?
        ul.lists
          li REST over webservices
          li URI for identifying resources
          li HTTP methods for operations
          li MIME-type for representation
          li hypertext links
      
      +slide
        h2.underline Examples
        h3 GET http://example.com/items/12
        h3 POST http://example.com/items
        h3 PUT http://example.com/items/12
        h3 DELETE http://example.com/items/12
        h3 PATCH http://example.com/items/12
      
      +slide('hotel')
        h1 Authentication <br />vs<br /> Authorization
      
      +slide
        h3 Authentication = Registration Desk
        h3 Authorization = Keys of your Room
      
      +slide('oldsec')
        h1 Java EE <br />and<br /><span class='important'>Security</span>
      
      +slide
        img.schemas(src='images/cookies.png')
      
      +slide('cookies')
        h2 Perils of <span class='important'>cookies</span>
      
      +slide('owasp')
        h2.underline XSS attack
        h3 &ldquo;XSS attacks occur when an attacker uses a web application<br /> to send malicious code, generally in the form of a browser side script,<br /> to a different end user.&rdquo;
        h4 &mdash; OWASP site &mdash;
        
      +slide('owasp')
        h2.underline CSRF attack
        h3 &ldquo;CSRF is an attack that forces an end user to execute unwanted actions on a web application <br /> in which they're currently authenticated.&rdquo;
        h3 &lt;img src="http://bank.com/transfer.do?acct=MARIA&amount=100000" width="0" height="0" border="0"&gt;
        h4 &mdash; OWASP site &mdash;
      
      +slide('owasp')
        h2.underline MITM attack
        h3 &ldquo;The man-in-the middle attack intercepts a communication between two systems.<br />The MITM attack could also be done over an https connection by using the same technique.&rdquo;
        h4 &mdash; OWASP site &mdash;
      
      +slide('adaoh')
        h2 HTTP Session and <span class='important'>RESTful</span>
      
      +slide
        h2.underline HTTP Sessions
        ul.lists
          li Opaque
          li Microservices roundtrip
          li Stateful
          li No Scalable
      
      +slide('vault')
        h1.title-single-words A new <span class='important'>Hope</span>
      
      +slide('tokens')
        h2 <span class='important'>TOKENS</span>
      
      +slide('jwt')
        h2 JWT
        h3 (jot)
        h2 JSON Web Token
      
      +slide
        h2.underline What is <span class='important'>JWT</span>?
        ul.lists
          li URL safe-token
          li HTTP header or URL parameter
          li Claims are JSON
          li Enable claims digitally signed, MACed or enncrypted
      
      +slide
        img(src='images/tokencolor.png')
      
      +slide
        h2.green Header
        pre.language-javascript
          code.
            {
              "type": "JWT",
              "alg": "HS256"
            }
        pre.language-java
          code.
            String header = new String(Base64.encodeBase64URLSafe(headerObject)
        
      +slide
        img(src='images/tokencolor.png')
      
      +slide
        h2.yellowColor Claims
        pre.language-javascript
          code.
            {
              "iss": "example.com",
              "sub": "alex",
              "exp": 1416891754,
              "roles": ["ADMIN", "USER"]
            }
            
        pre.language-java
          code.
            String claims = new String(Base64.encodeBase64URLSafe(claimObject)
      
      +slide
        img(src='images/tokencolor.png')
      
      +slide
        h2.blue Signature
        pre.language-java
          code.
            String signature = sign(algorithm, 
                                    join(new String[] {header, claims}, "."), 
                                    secret);
      +slide
        img(src='images/tokencolor.png')
        
      +slide
        h2 JWT
        pre.language-java
          code.
            String token = header + "." + payload + "." + signature;
      
      +slide
        img.schemas(src='images/jwt_wf.png')
      
      +slide('engine')
        h2 Start your Engines
      
      +slide('adaglasses')
        h1 Let's see inside
      
      +slide('finger')
        h2 Fingerprinting tokens
      
      +slide
        h2.underline Fingerprinting tokens
        ul.lists
          li Unique parameters
          li One degree of freedom
          li Detect stolen tokens
          
      +slide
        h2.underline Fingerprinting tokens
        ul.lists
          li Connection: IP, SSL ID
          li Browser: Agent, Accept-Language, Accept, Accept-Encoding
          li Javascript: Screen size, OS, TimeZone

      +slide('alexband')
        h1 Watch your <br/> <span class='important'>sensitive data</span>

      +slide
        h2.underline Encryption
        ul.lists
          li Use TLS
          li Encrypt JWT claims using <span class='important'>JWE</span>
          li Nested JWT using <span class='important'>JWE</span> (signed -> encrypted)

      +slide('pirates')
        h2 Foolproof
      
      +slide('ending')
        h1 We are <br/> Finishing

      +slide
        h2.underline Conclusions
        ul.lists
          li Tokens simplifies RESTful auth
          li Easy to implement and test
          li OAuth2, SAML, OpenID
          li Nimbus JOSE + JWT / JJWT
          li Key rotation
          li Don't use HTML 5 Web Storage
          li F5 survival with server cookies
          li Stateful Tokens (oh no)

      +slide
        img.avatar(src='images/profile.jpg')
        br
        a(href='http://github.com/lordofthejars/jwt-jz', style='border:none')
          h3 http://github.com/lordofthejars/jwt-jz

      +slide('adarise')
        h1 Questions


    script(src='build/build.js')
